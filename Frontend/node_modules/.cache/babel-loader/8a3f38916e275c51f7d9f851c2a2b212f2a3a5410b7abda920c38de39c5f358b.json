{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nexport const useFormData = () => {\n  _s();\n  // Estados principales del formulario\n  const [location, setLocation] = useState({\n    region: '',\n    address: '',\n    coordinates: null,\n    confirmed: false\n  });\n  const [selectedMedications, setSelectedMedications] = useState([]);\n  const [priority, setPriority] = useState('');\n  const [medications, setMedications] = useState([]);\n  const [availableDrones, setAvailableDrones] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [userInfo, setUserInfo] = useState(null);\n\n  // Datos estáticos\n  const regions = [{\n    value: 'amazonas',\n    label: 'Amazonas'\n  }, {\n    value: 'cusco',\n    label: 'Cusco'\n  }, {\n    value: 'puno',\n    label: 'Puno'\n  }, {\n    value: 'arequipa',\n    label: 'Arequipa'\n  }];\n  const availablePains = ['Dolor de cabeza', 'Fiebre', 'Dolor estomacal', 'Resfrío común', 'Presión alta', 'Diabetes', 'Dolor muscular', 'Alergias', 'Infección urinaria', 'Dolor de garganta'];\n\n  // Verificar autenticación del usuario\n  useEffect(() => {\n    const checkUserAuth = () => {\n      try {\n        const userId = localStorage.getItem('userId');\n        const userEmail = localStorage.getItem('email');\n        const userName = localStorage.getItem('nombre');\n        const userRole = localStorage.getItem('rol');\n        if (!userId || !userEmail) {\n          setError('Usuario no autenticado. Por favor, inicia sesión.');\n          return;\n        }\n        setUserInfo({\n          id: parseInt(userId),\n          email: userEmail,\n          name: userName,\n          role: userRole\n        });\n      } catch (storageError) {\n        console.error('Error accediendo a localStorage:', storageError);\n        setError('Error de sesión. Recarga la página e inicia sesión nuevamente.');\n      }\n    };\n    checkUserAuth();\n  }, []);\n\n  // Cargar medicamentos y drones desde la API\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n\n        // Cargar medicamentos\n        const medicationsResponse = await fetch('http://localhost:8081/api/medicamentos');\n        const medicationsData = await medicationsResponse.json();\n        setMedications(medicationsData);\n\n        // Cargar drones disponibles\n        const dronesResponse = await fetch('http://localhost:8081/api/drones');\n        const dronesData = await dronesResponse.json();\n        setAvailableDrones(dronesData);\n      } catch (err) {\n        console.error('Error al cargar datos:', err);\n        setError('Error al cargar datos desde el servidor');\n      } finally {\n        setLoading(false);\n      }\n    };\n    if (userInfo) {\n      fetchData();\n    }\n  }, [userInfo]);\n\n  // Debug de medicamentos cargados\n  useEffect(() => {\n    console.log('=== DEBUG MEDICAMENTOS CARGADOS ===');\n    console.log('medications array:', medications);\n    console.log('medications length:', medications.length);\n    if (medications.length > 0) {\n      console.log('Estructura del primer medicamento:', JSON.stringify(medications[0], null, 2));\n      console.log('Campos disponibles:', Object.keys(medications[0]));\n    }\n  }, [medications]);\n\n  // Función para asignar dron por prioridad\n  const assignDroneByPriority = priority => {\n    console.log('=== INICIO DEBUG ASIGNACIÓN DRON ===');\n    console.log('Prioridad recibida:', priority);\n    console.log('availableDrones:', availableDrones);\n    if (!availableDrones || !Array.isArray(availableDrones) || availableDrones.length === 0) {\n      console.error('❌ availableDrones está vacío o no es array válido');\n      return null;\n    }\n\n    // Mostrar información detallada de cada dron\n    console.log('--- ANÁLISIS DE DRONES DISPONIBLES ---');\n    availableDrones.forEach((drone, index) => {\n      console.log(`Dron ${index + 1}:`, {\n        id: drone.id,\n        identificador: drone.identificador,\n        modelo: drone.modelo,\n        capacidad_kg: drone.capacidadKg,\n        nivel_bateria: drone.nivelBateria,\n        tipo_bateria: typeof drone.nivelBateria,\n        valor_bateria_crudo: drone.nivelBateria\n      });\n    });\n\n    // Filtrar drones activos\n    const activeDrones = availableDrones.filter(drone => {\n      let bateria = 0;\n      if (typeof drone.nivelBateria === 'string') {\n        bateria = parseInt(drone.nivelBateria.replace(/[^0-9]/g, '')) || 0;\n      } else if (typeof drone.nivelBateria === 'number') {\n        bateria = drone.nivelBateria;\n      }\n      const bateriaMinima = 50;\n      const esValido = bateria >= bateriaMinima;\n      console.log(`Dron ${drone.identificador || drone.id}: \n        - Batería cruda: \"${drone.nivelBateria}\" (${typeof drone.nivelBateria})\n        - Batería procesada: ${bateria}%\n        - Mínima requerida: ${bateriaMinima}%\n        - Resultado: ${esValido ? 'VÁLIDO ✅' : 'RECHAZADO ❌'}`);\n      return esValido;\n    });\n    console.log(`Drones válidos encontrados: ${activeDrones.length}/${availableDrones.length}`);\n    if (activeDrones.length === 0) {\n      console.error('❌ NINGÚN DRON PASÓ EL FILTRO');\n      console.log('Intentando con filtro de emergencia...');\n      const emergencyDrones = availableDrones.filter(drone => {\n        const tieneId = drone.id && drone.identificador;\n        console.log(`Dron ${drone.identificador || 'sin_id'}: tiene datos básicos = ${tieneId}`);\n        return tieneId;\n      });\n      if (emergencyDrones.length > 0) {\n        console.log('✅ Usando filtro de emergencia, drones encontrados:', emergencyDrones.length);\n        return emergencyDrones[0];\n      }\n      console.error('❌ Incluso el filtro de emergencia falló');\n      return null;\n    }\n\n    // Lógica de selección por prioridad\n    let selectedDrone;\n    if (priority === 'alta') {\n      // Para prioridad alta: mayor capacidad y mejor batería\n      selectedDrone = activeDrones.reduce((best, current) => {\n        const bestCapacity = parseFloat(best.capacidadKg) || 0;\n        const currentCapacity = parseFloat(current.capacidadKg) || 0;\n        const bestBattery = parseInt(best.nivelBateria) || 0;\n        const currentBattery = parseInt(current.nivelBateria) || 0;\n        if (currentCapacity > bestCapacity) return current;\n        if (currentCapacity === bestCapacity && currentBattery > bestBattery) return current;\n        return best;\n      });\n    } else if (priority === 'media') {\n      // Para prioridad media: balance entre capacidad y batería\n      selectedDrone = activeDrones.reduce((best, current) => {\n        const bestScore = (parseFloat(best.capacidadKg) || 0) + (parseInt(best.nivelBateria) || 0);\n        const currentScore = (parseFloat(current.capacidadKg) || 0) + (parseInt(current.nivelBateria) || 0);\n        return currentScore > bestScore ? current : best;\n      });\n    } else {\n      // Para prioridad baja: cualquier dron disponible\n      selectedDrone = activeDrones[0];\n    }\n    console.log('✅ DRON SELECCIONADO:', {\n      id: selectedDrone.id,\n      identificador: selectedDrone.identificador,\n      modelo: selectedDrone.modelo,\n      capacidad_kg: selectedDrone.capacidadKg,\n      nivel_bateria: selectedDrone.nivelBateria,\n      prioridad_usada: priority\n    });\n    console.log('=== FIN DEBUG ASIGNACIÓN DRON ===');\n    return selectedDrone;\n  };\n\n  // Función para manejar selección de medicamentos\n  const handleMedicationSelect = pain => {\n    console.log('=== SELECCIONANDO MEDICAMENTO ===');\n    console.log('Dolor seleccionado:', pain);\n    const existing = selectedMedications.find(item => item.pain === pain);\n    if (existing) {\n      console.log('Medicamento ya existe para este dolor');\n      return;\n    }\n\n    // Buscar medicamento en la base de datos\n    const medicationForPain = medications.find(med => {\n      if (med.nombre_comercial && med.nombre_comercial.toLowerCase().includes(pain.toLowerCase())) {\n        return true;\n      }\n      if (med.dolores && med.dolores.toLowerCase() === pain.toLowerCase()) {\n        return true;\n      }\n      if (med.indicaciones && med.indicaciones.toLowerCase().includes(pain.toLowerCase())) {\n        return true;\n      }\n      return false;\n    });\n    console.log('Medicamento encontrado:', medicationForPain);\n    if (medicationForPain) {\n      if (!medicationForPain.id) {\n        console.error('❌ ERROR: El medicamento no tiene ID válido');\n        setError(`Error: El medicamento para ${pain} no tiene ID válido en la base de datos`);\n        return;\n      }\n      const newMedicationItem = {\n        pain,\n        medication: {\n          id: medicationForPain.id,\n          nombre_comercial: medicationForPain.nombre_comercial,\n          forma_administracion: medicationForPain.forma_administracion,\n          dolencia: pain,\n          peso: medicationForPain.peso || 0.02\n        },\n        quantity: 1\n      };\n      setSelectedMedications(prev => [...prev, newMedicationItem]);\n      console.log('✅ Medicamento agregado exitosamente');\n    } else {\n      setError(`No se encontró un medicamento específico para \"${pain}\" en nuestra base de datos. Por favor, contacta con el administrador.`);\n      console.log('❌ No se encontró medicamento para:', pain);\n    }\n  };\n\n  // Función para actualizar cantidad de medicamento\n  const updateMedicationQuantity = (pain, quantity) => {\n    const newQuantity = parseInt(quantity);\n    if (newQuantity > 0) {\n      setSelectedMedications(prev => prev.map(item => item.pain === pain ? {\n        ...item,\n        quantity: newQuantity\n      } : item));\n    }\n  };\n\n  // Función para remover medicamento\n  const removeMedication = pain => {\n    setSelectedMedications(prev => prev.filter(item => item.pain !== pain));\n  };\n\n  // Función para resetear formulario\n  const resetForm = () => {\n    setLocation({\n      region: '',\n      address: '',\n      coordinates: null,\n      confirmed: false\n    });\n    setSelectedMedications([]);\n    setPriority('');\n    setError('');\n  };\n\n  // Función para enviar solicitud\n  const handleSubmit = async () => {\n    console.log('=== INICIO HANDLE SUBMIT ===');\n    if (!userInfo) {\n      console.error('❌ Usuario no autenticado');\n      setError('Usuario no autenticado');\n      return;\n    }\n    setLoading(true);\n    setError('');\n    try {\n      var _regions$find;\n      // Verificar datos previos\n      console.log('--- Verificando datos antes de procesar ---');\n      console.log('selectedMedications:', JSON.stringify(selectedMedications, null, 2));\n      console.log('priority:', priority);\n      console.log('location:', JSON.stringify(location, null, 2));\n      console.log('userInfo:', JSON.stringify(userInfo, null, 2));\n      if (!availableDrones || availableDrones.length === 0) {\n        throw new Error('No se han cargado los drones disponibles. Recarga la página e intenta de nuevo.');\n      }\n\n      // Asignar dron\n      console.log('--- Llamando a assignDroneByPriority ---');\n      const assignedDrone = assignDroneByPriority(priority);\n      if (!assignedDrone) {\n        throw new Error(`No hay drones disponibles en este momento con la prioridad ${priority}.`);\n      }\n      console.log('✅ Dron asignado exitosamente:', JSON.stringify(assignedDrone, null, 2));\n\n      // Validar IDs\n      const userId = parseInt(userInfo.id);\n      const droneId = parseInt(assignedDrone.id);\n      console.log('=== VALIDACIÓN DE IDs ===');\n      console.log('userId (parseado):', userId, typeof userId);\n      console.log('droneId (parseado):', droneId, typeof droneId);\n      if (isNaN(userId) || isNaN(droneId) || userId <= 0 || droneId <= 0) {\n        throw new Error(`IDs inválidos - Usuario: ${userId}, Dron: ${droneId}`);\n      }\n\n      // Crear solicitud\n      const solicitudData = {\n        usuario: {\n          id: userId\n        },\n        prioridad: priority,\n        destino: location.address,\n        region: location.region,\n        estadoSolicitud: 'pendiente',\n        dronAsignado: {\n          id: droneId\n        },\n        fechaSolicitud: new Date().toISOString()\n      };\n      console.log('--- SOLICITUD: Enviando datos JPA FORMAT ---');\n      console.log('Datos a enviar:', JSON.stringify(solicitudData, null, 2));\n      const solicitudResponse = await fetch('http://localhost:8081/api/solicitudes', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify(solicitudData)\n      });\n      if (!solicitudResponse.ok) {\n        const errorText = await solicitudResponse.text();\n        console.error('❌ Error en solicitud:', errorText);\n        throw new Error(`Error al crear solicitud: ${solicitudResponse.status} - ${errorText}`);\n      }\n      const solicitudCreada = await solicitudResponse.json();\n      console.log('✅ Solicitud creada exitosamente:', JSON.stringify(solicitudCreada, null, 2));\n      const solicitudId = parseInt(solicitudCreada.id);\n      if (isNaN(solicitudId)) {\n        throw new Error('ID de solicitud inválido recibido del servidor');\n      }\n\n      // Guardar medicamentos\n      console.log('--- MEDICAMENTOS: Procesando lista ---');\n      for (let i = 0; i < selectedMedications.length; i++) {\n        const item = selectedMedications[i];\n        console.log(`\\n=== MEDICAMENTO ${i + 1} DEBUG ===`);\n        console.log('item completo:', JSON.stringify(item, null, 2));\n        if (!item.medication || !item.medication.id) {\n          console.error('❌ ERROR: Medicamento sin ID válido');\n          throw new Error(`Medicamento ${i + 1} no tiene ID válido`);\n        }\n        const medicamentoExiste = medications.find(med => med.id === item.medication.id);\n        if (!medicamentoExiste) {\n          console.error('❌ ERROR: Medicamento no existe en la base de datos');\n          throw new Error(`El medicamento con ID ${item.medication.id} no existe en la base de datos`);\n        }\n        const medicamentoData = {\n          solicitud: {\n            id: solicitudId\n          },\n          medicamento: {\n            id: parseInt(item.medication.id)\n          },\n          cantidad: parseInt(item.quantity)\n        };\n        console.log('Datos medicamento (JPA format):', JSON.stringify(medicamentoData, null, 2));\n        if (isNaN(medicamentoData.solicitud.id) || isNaN(medicamentoData.medicamento.id)) {\n          throw new Error(`IDs inválidos - Solicitud: ${medicamentoData.solicitud.id}, Medicamento: ${medicamentoData.medicamento.id}`);\n        }\n        const medicamentoResponse = await fetch('http://localhost:8081/api/solicitud-medicamentos', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json'\n          },\n          body: JSON.stringify(medicamentoData)\n        });\n        if (!medicamentoResponse.ok) {\n          const errorText = await medicamentoResponse.text();\n          console.error(`❌ Error en medicamento ${i + 1}:`, errorText);\n          throw new Error(`Error al guardar medicamento: ${errorText}`);\n        }\n        const medicamentoGuardado = await medicamentoResponse.json();\n        console.log(`✅ Medicamento ${i + 1} guardado exitosamente:`, medicamentoGuardado);\n      }\n\n      // Crear vuelo\n      console.log('--- VUELO: Preparando datos ---');\n      const vueloData = {\n        solicitud: {\n          id: solicitudId\n        },\n        dron: {\n          id: droneId\n        },\n        fechaInicio: new Date().toISOString(),\n        fechaFin: null,\n        duracionMinutos: null,\n        distanciaKm: null,\n        estadoEntrega: null\n      };\n      console.log('--- VUELO: Enviando datos JPA FORMAT ---');\n      console.log('Datos vuelo:', JSON.stringify(vueloData, null, 2));\n      const vueloResponse = await fetch('http://localhost:8081/api/vuelos', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify(vueloData)\n      });\n      if (!vueloResponse.ok) {\n        const errorText = await vueloResponse.text();\n        console.error('❌ Error en vuelo:', errorText);\n        throw new Error(`Error al crear vuelo: ${vueloResponse.status} - ${errorText}`);\n      }\n      const vueloCreado = await vueloResponse.json();\n      console.log('✅ Vuelo creado exitosamente:', JSON.stringify(vueloCreado, null, 2));\n\n      // Actualizar estado de solicitud\n      console.log('--- ACTUALIZANDO ESTADO SOLICITUD ---');\n      const updateSolicitudData = {\n        estadoSolicitud: 'asignada'\n      };\n      const updateResponse = await fetch(`http://localhost:8081/api/solicitudes/${solicitudId}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify(updateSolicitudData)\n      });\n      if (updateResponse.ok) {\n        console.log('✅ Estado de solicitud actualizado a \"asignada\"');\n      } else {\n        console.warn('⚠️ No se pudo actualizar el estado de la solicitud, pero continuando...');\n      }\n\n      // Mostrar éxito\n      const totalMedicamentos = selectedMedications.reduce((total, item) => total + item.quantity, 0);\n      const successMessage = `🎉 ¡SOLICITUD ENVIADA EXITOSAMENTE!\n\n📋 DETALLES:\n• ID Solicitud: ${solicitudCreada.id}\n• Estado: Asignada y procesándose\n\n👤 USUARIO: ${userInfo.name}\n🚁 DRON: ${assignedDrone.identificador}\n📍 REGIÓN: ${(_regions$find = regions.find(r => r.value === location.region)) === null || _regions$find === void 0 ? void 0 : _regions$find.label}\n💊 MEDICAMENTOS: ${totalMedicamentos} unidades\n⚡ PRIORIDAD: ${priority.toUpperCase()}\n\nEl dron se dirigirá a tu ubicación pronto. ¡Gracias por usar nuestro servicio!`;\n\n      // Retornar datos de éxito\n      return {\n        success: true,\n        message: successMessage,\n        data: {\n          solicitudId: solicitudCreada.id,\n          droneId: assignedDrone.id,\n          vueloId: vueloCreado.id,\n          totalMedicamentos\n        }\n      };\n    } catch (err) {\n      console.error('❌ Error completo en handleSubmit:', err);\n      setError(`Error al procesar la solicitud: ${err.message}`);\n      return {\n        success: false,\n        error: err.message\n      };\n    } finally {\n      setLoading(false);\n      console.log('=== FIN HANDLE SUBMIT ===');\n    }\n  };\n  return {\n    // Estados\n    location,\n    selectedMedications,\n    priority,\n    medications,\n    availableDrones,\n    loading,\n    error,\n    userInfo,\n    regions,\n    availablePains,\n    // Setters\n    setLocation,\n    setSelectedMedications,\n    setPriority,\n    setError,\n    setLoading,\n    // Funciones\n    assignDroneByPriority,\n    handleMedicationSelect,\n    updateMedicationQuantity,\n    removeMedication,\n    resetForm,\n    handleSubmit\n  };\n};\n_s(useFormData, \"RKBrNryi5grViTD8uqfyaJ+NReY=\");","map":{"version":3,"names":["useState","useEffect","useFormData","_s","location","setLocation","region","address","coordinates","confirmed","selectedMedications","setSelectedMedications","priority","setPriority","medications","setMedications","availableDrones","setAvailableDrones","loading","setLoading","error","setError","userInfo","setUserInfo","regions","value","label","availablePains","checkUserAuth","userId","localStorage","getItem","userEmail","userName","userRole","id","parseInt","email","name","role","storageError","console","fetchData","medicationsResponse","fetch","medicationsData","json","dronesResponse","dronesData","err","log","length","JSON","stringify","Object","keys","assignDroneByPriority","Array","isArray","forEach","drone","index","identificador","modelo","capacidad_kg","capacidadKg","nivel_bateria","nivelBateria","tipo_bateria","valor_bateria_crudo","activeDrones","filter","bateria","replace","bateriaMinima","esValido","emergencyDrones","tieneId","selectedDrone","reduce","best","current","bestCapacity","parseFloat","currentCapacity","bestBattery","currentBattery","bestScore","currentScore","prioridad_usada","handleMedicationSelect","pain","existing","find","item","medicationForPain","med","nombre_comercial","toLowerCase","includes","dolores","indicaciones","newMedicationItem","medication","forma_administracion","dolencia","peso","quantity","prev","updateMedicationQuantity","newQuantity","map","removeMedication","resetForm","handleSubmit","_regions$find","Error","assignedDrone","droneId","isNaN","solicitudData","usuario","prioridad","destino","estadoSolicitud","dronAsignado","fechaSolicitud","Date","toISOString","solicitudResponse","method","headers","body","ok","errorText","text","status","solicitudCreada","solicitudId","i","medicamentoExiste","medicamentoData","solicitud","medicamento","cantidad","medicamentoResponse","medicamentoGuardado","vueloData","dron","fechaInicio","fechaFin","duracionMinutos","distanciaKm","estadoEntrega","vueloResponse","vueloCreado","updateSolicitudData","updateResponse","warn","totalMedicamentos","total","successMessage","r","toUpperCase","success","message","data","vueloId"],"sources":["C:/Users/gv250/OneDrive/Escritorio/Productos/frontend/src/components/useFormData.jsx"],"sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\nexport const useFormData = () => {\r\n  // Estados principales del formulario\r\n  const [location, setLocation] = useState({\r\n    region: '',\r\n    address: '',\r\n    coordinates: null,\r\n    confirmed: false\r\n  });\r\n  \r\n  const [selectedMedications, setSelectedMedications] = useState([]);\r\n  const [priority, setPriority] = useState('');\r\n  const [medications, setMedications] = useState([]);\r\n  const [availableDrones, setAvailableDrones] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState('');\r\n  const [userInfo, setUserInfo] = useState(null);\r\n\r\n  // Datos estáticos\r\n  const regions = [\r\n    { value: 'amazonas', label: 'Amazonas' },\r\n    { value: 'cusco', label: 'Cusco' },\r\n    { value: 'puno', label: 'Puno' },\r\n    { value: 'arequipa', label: 'Arequipa' }\r\n  ];\r\n\r\n  const availablePains = [\r\n    'Dolor de cabeza',\r\n    'Fiebre',\r\n    'Dolor estomacal',\r\n    'Resfrío común',\r\n    'Presión alta',\r\n    'Diabetes',\r\n    'Dolor muscular',\r\n    'Alergias',\r\n    'Infección urinaria',\r\n    'Dolor de garganta'\r\n  ];\r\n\r\n  // Verificar autenticación del usuario\r\n  useEffect(() => {\r\n    const checkUserAuth = () => {\r\n      try {\r\n        const userId = localStorage.getItem('userId');\r\n        const userEmail = localStorage.getItem('email');\r\n        const userName = localStorage.getItem('nombre');\r\n        const userRole = localStorage.getItem('rol');\r\n\r\n        if (!userId || !userEmail) {\r\n          setError('Usuario no autenticado. Por favor, inicia sesión.');\r\n          return;\r\n        }\r\n\r\n        setUserInfo({\r\n          id: parseInt(userId),\r\n          email: userEmail,\r\n          name: userName,\r\n          role: userRole\r\n        });\r\n      } catch (storageError) {\r\n        console.error('Error accediendo a localStorage:', storageError);\r\n        setError('Error de sesión. Recarga la página e inicia sesión nuevamente.');\r\n      }\r\n    };\r\n\r\n    checkUserAuth();\r\n  }, []);\r\n\r\n  // Cargar medicamentos y drones desde la API\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        setLoading(true);\r\n        \r\n        // Cargar medicamentos\r\n        const medicationsResponse = await fetch('http://localhost:8081/api/medicamentos');\r\n        const medicationsData = await medicationsResponse.json();\r\n        setMedications(medicationsData);\r\n\r\n        // Cargar drones disponibles\r\n        const dronesResponse = await fetch('http://localhost:8081/api/drones');\r\n        const dronesData = await dronesResponse.json();\r\n        setAvailableDrones(dronesData);\r\n\r\n      } catch (err) {\r\n        console.error('Error al cargar datos:', err);\r\n        setError('Error al cargar datos desde el servidor');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    if (userInfo) {\r\n      fetchData();\r\n    }\r\n  }, [userInfo]);\r\n\r\n  // Debug de medicamentos cargados\r\n  useEffect(() => {\r\n    console.log('=== DEBUG MEDICAMENTOS CARGADOS ===');\r\n    console.log('medications array:', medications);\r\n    console.log('medications length:', medications.length);\r\n    \r\n    if (medications.length > 0) {\r\n      console.log('Estructura del primer medicamento:', JSON.stringify(medications[0], null, 2));\r\n      console.log('Campos disponibles:', Object.keys(medications[0]));\r\n    }\r\n  }, [medications]);\r\n\r\n  // Función para asignar dron por prioridad\r\n  const assignDroneByPriority = (priority) => {\r\n    console.log('=== INICIO DEBUG ASIGNACIÓN DRON ===');\r\n    console.log('Prioridad recibida:', priority);\r\n    console.log('availableDrones:', availableDrones);\r\n    \r\n    if (!availableDrones || !Array.isArray(availableDrones) || availableDrones.length === 0) {\r\n      console.error('❌ availableDrones está vacío o no es array válido');\r\n      return null;\r\n    }\r\n\r\n    // Mostrar información detallada de cada dron\r\n    console.log('--- ANÁLISIS DE DRONES DISPONIBLES ---');\r\n    availableDrones.forEach((drone, index) => {\r\n      console.log(`Dron ${index + 1}:`, {\r\n        id: drone.id,\r\n        identificador: drone.identificador,\r\n        modelo: drone.modelo,\r\n        capacidad_kg: drone.capacidadKg,\r\n        nivel_bateria: drone.nivelBateria,\r\n        tipo_bateria: typeof drone.nivelBateria,\r\n        valor_bateria_crudo: drone.nivelBateria\r\n      });\r\n    });\r\n\r\n    // Filtrar drones activos\r\n    const activeDrones = availableDrones.filter(drone => {\r\n      let bateria = 0;\r\n      \r\n      if (typeof drone.nivelBateria === 'string') {\r\n        bateria = parseInt(drone.nivelBateria.replace(/[^0-9]/g, '')) || 0;\r\n      } else if (typeof drone.nivelBateria === 'number') {\r\n        bateria = drone.nivelBateria;\r\n      }\r\n      \r\n      const bateriaMinima = 50;\r\n      const esValido = bateria >= bateriaMinima;\r\n      \r\n      console.log(`Dron ${drone.identificador || drone.id}: \r\n        - Batería cruda: \"${drone.nivelBateria}\" (${typeof drone.nivelBateria})\r\n        - Batería procesada: ${bateria}%\r\n        - Mínima requerida: ${bateriaMinima}%\r\n        - Resultado: ${esValido ? 'VÁLIDO ✅' : 'RECHAZADO ❌'}`);\r\n      \r\n      return esValido;\r\n    });\r\n\r\n    console.log(`Drones válidos encontrados: ${activeDrones.length}/${availableDrones.length}`);\r\n\r\n    if (activeDrones.length === 0) {\r\n      console.error('❌ NINGÚN DRON PASÓ EL FILTRO');\r\n      console.log('Intentando con filtro de emergencia...');\r\n      \r\n      const emergencyDrones = availableDrones.filter(drone => {\r\n        const tieneId = drone.id && drone.identificador;\r\n        console.log(`Dron ${drone.identificador || 'sin_id'}: tiene datos básicos = ${tieneId}`);\r\n        return tieneId;\r\n      });\r\n      \r\n      if (emergencyDrones.length > 0) {\r\n        console.log('✅ Usando filtro de emergencia, drones encontrados:', emergencyDrones.length);\r\n        return emergencyDrones[0];\r\n      }\r\n      \r\n      console.error('❌ Incluso el filtro de emergencia falló');\r\n      return null;\r\n    }\r\n\r\n    // Lógica de selección por prioridad\r\n    let selectedDrone;\r\n    \r\n    if (priority === 'alta') {\r\n      // Para prioridad alta: mayor capacidad y mejor batería\r\n      selectedDrone = activeDrones.reduce((best, current) => {\r\n        const bestCapacity = parseFloat(best.capacidadKg) || 0;\r\n        const currentCapacity = parseFloat(current.capacidadKg) || 0;\r\n        const bestBattery = parseInt(best.nivelBateria) || 0;\r\n        const currentBattery = parseInt(current.nivelBateria) || 0;\r\n        \r\n        if (currentCapacity > bestCapacity) return current;\r\n        if (currentCapacity === bestCapacity && currentBattery > bestBattery) return current;\r\n        return best;\r\n      });\r\n    } else if (priority === 'media') {\r\n      // Para prioridad media: balance entre capacidad y batería\r\n      selectedDrone = activeDrones.reduce((best, current) => {\r\n        const bestScore = (parseFloat(best.capacidadKg) || 0) + (parseInt(best.nivelBateria) || 0);\r\n        const currentScore = (parseFloat(current.capacidadKg) || 0) + (parseInt(current.nivelBateria) || 0);\r\n        return currentScore > bestScore ? current : best;\r\n      });\r\n    } else {\r\n      // Para prioridad baja: cualquier dron disponible\r\n      selectedDrone = activeDrones[0];\r\n    }\r\n\r\n    console.log('✅ DRON SELECCIONADO:', {\r\n      id: selectedDrone.id,\r\n      identificador: selectedDrone.identificador,\r\n      modelo: selectedDrone.modelo,\r\n      capacidad_kg: selectedDrone.capacidadKg,\r\n      nivel_bateria: selectedDrone.nivelBateria,\r\n      prioridad_usada: priority\r\n    });\r\n\r\n    console.log('=== FIN DEBUG ASIGNACIÓN DRON ===');\r\n    return selectedDrone;\r\n  };\r\n\r\n  // Función para manejar selección de medicamentos\r\n  const handleMedicationSelect = (pain) => {\r\n    console.log('=== SELECCIONANDO MEDICAMENTO ===');\r\n    console.log('Dolor seleccionado:', pain);\r\n    \r\n    const existing = selectedMedications.find(item => item.pain === pain);\r\n    if (existing) {\r\n      console.log('Medicamento ya existe para este dolor');\r\n      return;\r\n    }\r\n\r\n    // Buscar medicamento en la base de datos\r\n    const medicationForPain = medications.find(med => {\r\n      if (med.nombre_comercial && med.nombre_comercial.toLowerCase().includes(pain.toLowerCase())) {\r\n        return true;\r\n      }\r\n      if (med.dolores && med.dolores.toLowerCase() === pain.toLowerCase()) {\r\n        return true;\r\n      }\r\n      if (med.indicaciones && med.indicaciones.toLowerCase().includes(pain.toLowerCase())) {\r\n        return true;\r\n      }\r\n      return false;\r\n    });\r\n\r\n    console.log('Medicamento encontrado:', medicationForPain);\r\n\r\n    if (medicationForPain) {\r\n      if (!medicationForPain.id) {\r\n        console.error('❌ ERROR: El medicamento no tiene ID válido');\r\n        setError(`Error: El medicamento para ${pain} no tiene ID válido en la base de datos`);\r\n        return;\r\n      }\r\n      \r\n      const newMedicationItem = {\r\n        pain,\r\n        medication: {\r\n          id: medicationForPain.id,\r\n          nombre_comercial: medicationForPain.nombre_comercial,\r\n          forma_administracion: medicationForPain.forma_administracion,\r\n          dolencia: pain,\r\n          peso: medicationForPain.peso || 0.02\r\n        },\r\n        quantity: 1\r\n      };\r\n      \r\n      setSelectedMedications(prev => [...prev, newMedicationItem]);\r\n      console.log('✅ Medicamento agregado exitosamente');\r\n    } else {\r\n      setError(`No se encontró un medicamento específico para \"${pain}\" en nuestra base de datos. Por favor, contacta con el administrador.`);\r\n      console.log('❌ No se encontró medicamento para:', pain);\r\n    }\r\n  };\r\n\r\n  // Función para actualizar cantidad de medicamento\r\n  const updateMedicationQuantity = (pain, quantity) => {\r\n    const newQuantity = parseInt(quantity);\r\n    if (newQuantity > 0) {\r\n      setSelectedMedications(prev => \r\n        prev.map(item => \r\n          item.pain === pain ? { ...item, quantity: newQuantity } : item\r\n        )\r\n      );\r\n    }\r\n  };\r\n\r\n  // Función para remover medicamento\r\n  const removeMedication = (pain) => {\r\n    setSelectedMedications(prev => prev.filter(item => item.pain !== pain));\r\n  };\r\n\r\n  // Función para resetear formulario\r\n  const resetForm = () => {\r\n    setLocation({ region: '', address: '', coordinates: null, confirmed: false });\r\n    setSelectedMedications([]);\r\n    setPriority('');\r\n    setError('');\r\n  };\r\n\r\n  // Función para enviar solicitud\r\n  const handleSubmit = async () => {\r\n    console.log('=== INICIO HANDLE SUBMIT ===');\r\n    \r\n    if (!userInfo) {\r\n      console.error('❌ Usuario no autenticado');\r\n      setError('Usuario no autenticado');\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    setError('');\r\n    \r\n    try {\r\n      // Verificar datos previos\r\n      console.log('--- Verificando datos antes de procesar ---');\r\n      console.log('selectedMedications:', JSON.stringify(selectedMedications, null, 2));\r\n      console.log('priority:', priority);\r\n      console.log('location:', JSON.stringify(location, null, 2));\r\n      console.log('userInfo:', JSON.stringify(userInfo, null, 2));\r\n      \r\n      if (!availableDrones || availableDrones.length === 0) {\r\n        throw new Error('No se han cargado los drones disponibles. Recarga la página e intenta de nuevo.');\r\n      }\r\n\r\n      // Asignar dron\r\n      console.log('--- Llamando a assignDroneByPriority ---');\r\n      const assignedDrone = assignDroneByPriority(priority);\r\n      \r\n      if (!assignedDrone) {\r\n        throw new Error(`No hay drones disponibles en este momento con la prioridad ${priority}.`);\r\n      }\r\n\r\n      console.log('✅ Dron asignado exitosamente:', JSON.stringify(assignedDrone, null, 2));\r\n\r\n      // Validar IDs\r\n      const userId = parseInt(userInfo.id);\r\n      const droneId = parseInt(assignedDrone.id);\r\n      \r\n      console.log('=== VALIDACIÓN DE IDs ===');\r\n      console.log('userId (parseado):', userId, typeof userId);\r\n      console.log('droneId (parseado):', droneId, typeof droneId);\r\n      \r\n      if (isNaN(userId) || isNaN(droneId) || userId <= 0 || droneId <= 0) {\r\n        throw new Error(`IDs inválidos - Usuario: ${userId}, Dron: ${droneId}`);\r\n      }\r\n\r\n      // Crear solicitud\r\n      const solicitudData = {\r\n        usuario: { id: userId },\r\n        prioridad: priority,\r\n        destino: location.address,\r\n        region: location.region,\r\n        estadoSolicitud: 'pendiente',\r\n        dronAsignado: { id: droneId },\r\n        fechaSolicitud: new Date().toISOString()\r\n      };\r\n\r\n      console.log('--- SOLICITUD: Enviando datos JPA FORMAT ---');\r\n      console.log('Datos a enviar:', JSON.stringify(solicitudData, null, 2));\r\n\r\n      const solicitudResponse = await fetch('http://localhost:8081/api/solicitudes', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Accept': 'application/json'\r\n        },\r\n        body: JSON.stringify(solicitudData),\r\n      });\r\n\r\n      if (!solicitudResponse.ok) {\r\n        const errorText = await solicitudResponse.text();\r\n        console.error('❌ Error en solicitud:', errorText);\r\n        throw new Error(`Error al crear solicitud: ${solicitudResponse.status} - ${errorText}`);\r\n      }\r\n\r\n      const solicitudCreada = await solicitudResponse.json();\r\n      console.log('✅ Solicitud creada exitosamente:', JSON.stringify(solicitudCreada, null, 2));\r\n\r\n      const solicitudId = parseInt(solicitudCreada.id);\r\n      if (isNaN(solicitudId)) {\r\n        throw new Error('ID de solicitud inválido recibido del servidor');\r\n      }\r\n\r\n      // Guardar medicamentos\r\n      console.log('--- MEDICAMENTOS: Procesando lista ---');\r\n\r\n      for (let i = 0; i < selectedMedications.length; i++) {\r\n        const item = selectedMedications[i];\r\n        \r\n        console.log(`\\n=== MEDICAMENTO ${i + 1} DEBUG ===`);\r\n        console.log('item completo:', JSON.stringify(item, null, 2));\r\n        \r\n        if (!item.medication || !item.medication.id) {\r\n          console.error('❌ ERROR: Medicamento sin ID válido');\r\n          throw new Error(`Medicamento ${i + 1} no tiene ID válido`);\r\n        }\r\n        \r\n        const medicamentoExiste = medications.find(med => med.id === item.medication.id);\r\n        if (!medicamentoExiste) {\r\n          console.error('❌ ERROR: Medicamento no existe en la base de datos');\r\n          throw new Error(`El medicamento con ID ${item.medication.id} no existe en la base de datos`);\r\n        }\r\n        \r\n        const medicamentoData = {\r\n          solicitud: { id: solicitudId },\r\n          medicamento: { id: parseInt(item.medication.id) },\r\n          cantidad: parseInt(item.quantity)\r\n        };\r\n\r\n        console.log('Datos medicamento (JPA format):', JSON.stringify(medicamentoData, null, 2));\r\n        \r\n        if (isNaN(medicamentoData.solicitud.id) || isNaN(medicamentoData.medicamento.id)) {\r\n          throw new Error(`IDs inválidos - Solicitud: ${medicamentoData.solicitud.id}, Medicamento: ${medicamentoData.medicamento.id}`);\r\n        }\r\n\r\n        const medicamentoResponse = await fetch('http://localhost:8081/api/solicitud-medicamentos', {\r\n          method: 'POST',\r\n          headers: { \r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json'\r\n          },\r\n          body: JSON.stringify(medicamentoData),\r\n        });\r\n\r\n        if (!medicamentoResponse.ok) {\r\n          const errorText = await medicamentoResponse.text();\r\n          console.error(`❌ Error en medicamento ${i + 1}:`, errorText);\r\n          throw new Error(`Error al guardar medicamento: ${errorText}`);\r\n        }\r\n\r\n        const medicamentoGuardado = await medicamentoResponse.json();\r\n        console.log(`✅ Medicamento ${i + 1} guardado exitosamente:`, medicamentoGuardado);\r\n      }\r\n\r\n      // Crear vuelo\r\n      console.log('--- VUELO: Preparando datos ---');\r\n      \r\n      const vueloData = {\r\n        solicitud: { id: solicitudId },\r\n        dron: { id: droneId },\r\n        fechaInicio: new Date().toISOString(),\r\n        fechaFin: null,\r\n        duracionMinutos: null,\r\n        distanciaKm: null,\r\n        estadoEntrega: null\r\n      };\r\n\r\n      console.log('--- VUELO: Enviando datos JPA FORMAT ---');\r\n      console.log('Datos vuelo:', JSON.stringify(vueloData, null, 2));\r\n\r\n      const vueloResponse = await fetch('http://localhost:8081/api/vuelos', {\r\n        method: 'POST',\r\n        headers: { \r\n          'Content-Type': 'application/json',\r\n          'Accept': 'application/json'\r\n        },\r\n        body: JSON.stringify(vueloData),\r\n      });\r\n\r\n      if (!vueloResponse.ok) {\r\n        const errorText = await vueloResponse.text();\r\n        console.error('❌ Error en vuelo:', errorText);\r\n        throw new Error(`Error al crear vuelo: ${vueloResponse.status} - ${errorText}`);\r\n      }\r\n\r\n      const vueloCreado = await vueloResponse.json();\r\n      console.log('✅ Vuelo creado exitosamente:', JSON.stringify(vueloCreado, null, 2));\r\n\r\n      // Actualizar estado de solicitud\r\n      console.log('--- ACTUALIZANDO ESTADO SOLICITUD ---');\r\n      const updateSolicitudData = { estadoSolicitud: 'asignada' };\r\n\r\n      const updateResponse = await fetch(`http://localhost:8081/api/solicitudes/${solicitudId}`, {\r\n        method: 'PUT',\r\n        headers: { \r\n          'Content-Type': 'application/json',\r\n          'Accept': 'application/json'\r\n        },\r\n        body: JSON.stringify(updateSolicitudData),\r\n      });\r\n\r\n      if (updateResponse.ok) {\r\n        console.log('✅ Estado de solicitud actualizado a \"asignada\"');\r\n      } else {\r\n        console.warn('⚠️ No se pudo actualizar el estado de la solicitud, pero continuando...');\r\n      }\r\n\r\n      // Mostrar éxito\r\n      const totalMedicamentos = selectedMedications.reduce((total, item) => total + item.quantity, 0);\r\n      \r\n      const successMessage = `🎉 ¡SOLICITUD ENVIADA EXITOSAMENTE!\r\n\r\n📋 DETALLES:\r\n• ID Solicitud: ${solicitudCreada.id}\r\n• Estado: Asignada y procesándose\r\n\r\n👤 USUARIO: ${userInfo.name}\r\n🚁 DRON: ${assignedDrone.identificador}\r\n📍 REGIÓN: ${regions.find(r => r.value === location.region)?.label}\r\n💊 MEDICAMENTOS: ${totalMedicamentos} unidades\r\n⚡ PRIORIDAD: ${priority.toUpperCase()}\r\n\r\nEl dron se dirigirá a tu ubicación pronto. ¡Gracias por usar nuestro servicio!`;\r\n\r\n      // Retornar datos de éxito\r\n      return {\r\n        success: true,\r\n        message: successMessage,\r\n        data: {\r\n          solicitudId: solicitudCreada.id,\r\n          droneId: assignedDrone.id,\r\n          vueloId: vueloCreado.id,\r\n          totalMedicamentos\r\n        }\r\n      };\r\n      \r\n    } catch (err) {\r\n      console.error('❌ Error completo en handleSubmit:', err);\r\n      setError(`Error al procesar la solicitud: ${err.message}`);\r\n      \r\n      return {\r\n        success: false,\r\n        error: err.message\r\n      };\r\n    } finally {\r\n      setLoading(false);\r\n      console.log('=== FIN HANDLE SUBMIT ===');\r\n    }\r\n  };\r\n\r\n  return {\r\n    // Estados\r\n    location,\r\n    selectedMedications,\r\n    priority,\r\n    medications,\r\n    availableDrones,\r\n    loading,\r\n    error,\r\n    userInfo,\r\n    regions,\r\n    availablePains,\r\n    \r\n    // Setters\r\n    setLocation,\r\n    setSelectedMedications,\r\n    setPriority,\r\n    setError,\r\n    setLoading,\r\n    \r\n    // Funciones\r\n    assignDroneByPriority,\r\n    handleMedicationSelect,\r\n    updateMedicationQuantity,\r\n    removeMedication,\r\n    resetForm,\r\n    handleSubmit\r\n  };\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}