{"ast":null,"code":"import { useState } from 'react';\nexport const useSubmitHandler = ({\n  userInfo,\n  selectedMedications,\n  priority,\n  location,\n  availableDrones,\n  medications,\n  setCurrentStep,\n  setLocation,\n  setSelectedMedications,\n  setPriority,\n  setLoading,\n  setError\n}) => {\n  const assignDroneByPriority = (priority, drones) => {\n    // Reutiliza tu lógica completa aquí (simplificada en este ejemplo)\n    const dronesValidos = drones.filter(drone => {\n      var _drone$nivelBateria, _drone$nivelBateria$r;\n      const bateria = parseInt(((_drone$nivelBateria = drone.nivelBateria) === null || _drone$nivelBateria === void 0 ? void 0 : (_drone$nivelBateria$r = _drone$nivelBateria.replace) === null || _drone$nivelBateria$r === void 0 ? void 0 : _drone$nivelBateria$r.call(_drone$nivelBateria, '%', '')) || drone.nivelBateria);\n      return bateria >= 50;\n    });\n    if (priority === 'alta') {\n      return dronesValidos.sort((a, b) => b.capacidadKg - a.capacidadKg)[0];\n    }\n    return dronesValidos[0] || null;\n  };\n  const handleSubmit = async () => {\n    if (!userInfo) {\n      setError('Usuario no autenticado');\n      return;\n    }\n    setLoading(true);\n    setError('');\n    try {\n      const assignedDrone = assignDroneByPriority(priority, availableDrones);\n      if (!assignedDrone) throw new Error('No hay drones disponibles.');\n      const userId = parseInt(userInfo.id);\n      const droneId = parseInt(assignedDrone.id);\n      const solicitudData = {\n        usuario: {\n          id: userId\n        },\n        prioridad: priority,\n        destino: location.address,\n        region: location.region,\n        estadoSolicitud: 'pendiente',\n        dronAsignado: {\n          id: droneId\n        },\n        fechaSolicitud: new Date().toISOString()\n      };\n      const resSolicitud = await fetch('http://localhost:8081/api/solicitudes', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(solicitudData)\n      });\n      if (!resSolicitud.ok) throw new Error(await resSolicitud.text());\n      const solicitud = await resSolicitud.json();\n      for (const item of selectedMedications) {\n        const medicamentoData = {\n          solicitud: {\n            id: solicitud.id\n          },\n          medicamento: {\n            id: parseInt(item.medication.id)\n          },\n          cantidad: parseInt(item.quantity)\n        };\n        const resMed = await fetch('http://localhost:8081/api/solicitud-medicamentos', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(medicamentoData)\n        });\n        if (!resMed.ok) throw new Error(await resMed.text());\n      }\n      const vueloData = {\n        solicitud: {\n          id: solicitud.id\n        },\n        dron: {\n          id: droneId\n        },\n        fechaInicio: new Date().toISOString()\n      };\n      await fetch('http://localhost:8081/api/vuelos', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(vueloData)\n      });\n      await fetch(`http://localhost:8081/api/solicitudes/${solicitud.id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          estadoSolicitud: 'asignada'\n        })\n      });\n      alert('✅ Solicitud enviada exitosamente');\n      // Resetear datos\n      setCurrentStep(1);\n      setLocation({\n        region: '',\n        address: '',\n        coordinates: null,\n        confirmed: false\n      });\n      setSelectedMedications([]);\n      setPriority('');\n    } catch (err) {\n      setError(`Error al enviar solicitud: ${err.message}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n  return {\n    handleSubmit\n  };\n};","map":{"version":3,"names":["useState","useSubmitHandler","userInfo","selectedMedications","priority","location","availableDrones","medications","setCurrentStep","setLocation","setSelectedMedications","setPriority","setLoading","setError","assignDroneByPriority","drones","dronesValidos","filter","drone","_drone$nivelBateria","_drone$nivelBateria$r","bateria","parseInt","nivelBateria","replace","call","sort","a","b","capacidadKg","handleSubmit","assignedDrone","Error","userId","id","droneId","solicitudData","usuario","prioridad","destino","address","region","estadoSolicitud","dronAsignado","fechaSolicitud","Date","toISOString","resSolicitud","fetch","method","headers","body","JSON","stringify","ok","text","solicitud","json","item","medicamentoData","medicamento","medication","cantidad","quantity","resMed","vueloData","dron","fechaInicio","alert","coordinates","confirmed","err","message"],"sources":["C:/Users/gv250/OneDrive/Escritorio/Productos/frontend/src/components/useSubmitHandler.jsx"],"sourcesContent":["import { useState } from 'react';\r\n\r\nexport const useSubmitHandler = ({\r\n  userInfo,\r\n  selectedMedications,\r\n  priority,\r\n  location,\r\n  availableDrones,\r\n  medications,\r\n  setCurrentStep,\r\n  setLocation,\r\n  setSelectedMedications,\r\n  setPriority,\r\n  setLoading,\r\n  setError\r\n}) => {\r\n\r\n  const assignDroneByPriority = (priority, drones) => {\r\n    // Reutiliza tu lógica completa aquí (simplificada en este ejemplo)\r\n    const dronesValidos = drones.filter(drone => {\r\n      const bateria = parseInt(drone.nivelBateria?.replace?.('%', '') || drone.nivelBateria);\r\n      return bateria >= 50;\r\n    });\r\n\r\n    if (priority === 'alta') {\r\n      return dronesValidos.sort((a, b) => b.capacidadKg - a.capacidadKg)[0];\r\n    }\r\n\r\n    return dronesValidos[0] || null;\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    if (!userInfo) {\r\n      setError('Usuario no autenticado');\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    setError('');\r\n\r\n    try {\r\n      const assignedDrone = assignDroneByPriority(priority, availableDrones);\r\n      if (!assignedDrone) throw new Error('No hay drones disponibles.');\r\n\r\n      const userId = parseInt(userInfo.id);\r\n      const droneId = parseInt(assignedDrone.id);\r\n\r\n      const solicitudData = {\r\n        usuario: { id: userId },\r\n        prioridad: priority,\r\n        destino: location.address,\r\n        region: location.region,\r\n        estadoSolicitud: 'pendiente',\r\n        dronAsignado: { id: droneId },\r\n        fechaSolicitud: new Date().toISOString()\r\n      };\r\n\r\n      const resSolicitud = await fetch('http://localhost:8081/api/solicitudes', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(solicitudData)\r\n      });\r\n\r\n      if (!resSolicitud.ok) throw new Error(await resSolicitud.text());\r\n      const solicitud = await resSolicitud.json();\r\n\r\n      for (const item of selectedMedications) {\r\n        const medicamentoData = {\r\n          solicitud: { id: solicitud.id },\r\n          medicamento: { id: parseInt(item.medication.id) },\r\n          cantidad: parseInt(item.quantity)\r\n        };\r\n\r\n        const resMed = await fetch('http://localhost:8081/api/solicitud-medicamentos', {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify(medicamentoData)\r\n        });\r\n\r\n        if (!resMed.ok) throw new Error(await resMed.text());\r\n      }\r\n\r\n      const vueloData = {\r\n        solicitud: { id: solicitud.id },\r\n        dron: { id: droneId },\r\n        fechaInicio: new Date().toISOString()\r\n      };\r\n\r\n      await fetch('http://localhost:8081/api/vuelos', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(vueloData)\r\n      });\r\n\r\n      await fetch(`http://localhost:8081/api/solicitudes/${solicitud.id}`, {\r\n        method: 'PUT',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ estadoSolicitud: 'asignada' })\r\n      });\r\n\r\n      alert('✅ Solicitud enviada exitosamente');\r\n      // Resetear datos\r\n      setCurrentStep(1);\r\n      setLocation({ region: '', address: '', coordinates: null, confirmed: false });\r\n      setSelectedMedications([]);\r\n      setPriority('');\r\n\r\n    } catch (err) {\r\n      setError(`Error al enviar solicitud: ${err.message}`);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return { handleSubmit };\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}